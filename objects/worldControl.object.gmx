<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize physics world
physics_world_update_iterations(15);
physics_world_update_speed(room_speed*4);

//Player stats
globalvar click_strength,block_formation_level,points,block_level,auto_click_level,prestige_rank,prestige_points,prestige_block_level,combo_level,platform_level,respawn_level,base_block_level,uber_rank,uber_prestige_points;
click_strength = 1; //How much force is applied each click.
block_formation_level = 1; //The complexity of block formations
block_level = 1; //The block's potential level!
auto_click_level = 0;
points = 0; //The player's score!
prestige_block_level = 0;
prestige_rank = 0;
prestige_points = 0;
combo_level = 1;
platform_level = 0;
respawn_level = 0;
uber_rank = 0;
uber_prestige_points = 0;

//- blue prestige
base_block_level = 0;
base_block_formation_level = 0;
combo_power = 1;

//local variables
ui_state = "NONE";
ui_x = 0;
combo_count = 0;
frame_split = false;
frame_split_count = 0;

cooldown = 0;
auto_cooldown = 60;

//- cost
block_formation_level_cost = max(25*block_formation_level,power(block_formation_level*100,floor((block_formation_level-1)/2)));
block_level_cost = max(10*block_level,power(block_level*25,floor((block_level-1)/3)));
click_strength_cost = max(click_strength*10,(click_strength*(10*floor(click_strength/2))));
auto_click_level_cost = max(50,75*auto_click_level,power(auto_click_level*100,floor(auto_click_level/3)));


//- prestige cost
prestige_block_level_cost = max(1,power(5,prestige_block_level));
combo_level_cost = max(10,power(10,combo_level));
platform_level_cost = max(25,power(8,platform_level));
respawn_level_cost = max(125,250*respawn_level,power(26,respawn_level));

//- blue prestige cost
base_block_level_cost = max(1500,5000*base_block_level,power(250,base_block_level));
base_block_formation_level_cost = max(2500,6500*base_block_formation_level,power(base_block_formation_level*100,floor((base_block_formation_level-1)/2)));
combo_power_cost = max(power(10,9),power(2500,combo_power));

//- uber rank cost
uber_rank_cost = uber_rank*100;

//- max levels
click_strength_max_level = 5;
prestige_block_level_max = 5;
combo_level_max = 10;
platform_level_max = 9;
respawn_level_max = 10;
base_block_level_max = 9;
base_block_formation_level_max = 5;

//- maxed bool
click_strength_maxed = false;
prestige_block_level_maxed = false;
combo_level_maxed = false;
platform_level_maxed = false;
respawn_level_maxed = false;
base_block_formation_level_maxed = false;
base_block_level_maxed = false;

//Load the game
scr_loadGame();

alarm[0] = room_speed;
alarm[1] = room_speed*60;

//show_debug_overlay(true);
frame_skip = 0;

sound_muted = true; //MUTE SOUND ?

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SAVE GAME TIMER
event_user(0);

alarm[0] = room_speed*60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control combos
alarm[0] = room_speed;
combo_count -= 1;

combo_count = max(0,combo_count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World and HUD Control
//Respawn blocks
var block_count = instance_number(obj_block);
var true_formation_level = block_formation_level+base_block_formation_level;

if block_count &lt;= (true_formation_level*floor(true_formation_level/2))*respawn_level
{
    //Spawn blocks!
    for(r=0;r&lt;ceil(true_formation_level/2);r++)
    {
        for(i=0;i&lt;true_formation_level;i++)
        {
            //Check boundaries
            var xx = x+(i*16)-(8*(true_formation_level))+i;
            var yy = y+(r*16);
            if xx &gt; room_width || xx &lt; 0 || position_meeting(xx,yy,OBSTA) then continue;
            
            //Spawn the block
            instance_create(xx,yy,obj_block);
        }
    }
}

//Cooldown
cooldown = approach(cooldown,0,1);

//Autoclick timer
auto_cooldown -= 1;

if auto_cooldown &lt;= 0+auto_click_level*2 &amp;&amp; auto_click_level &gt; 0
{
    if instance_exists(obj_block)
    {
        var xx = instance_nearest(x,y,obj_block).x+choose(16);
        var yy = instance_nearest(x,y,obj_block).y+choose(16,-16);
    
        with obj_block
        {
            var amt = auto_click_level*16; //How powerful the click is
            
            //Check whether or not the block is within range
            if (point_distance(x,y,xx,yy) &gt; 128+amt || phy_speed_y != 0) then continue;
            
            //Apply the impulse
            physics_apply_impulse(xx,yy,-(amt*sign(xx-x)),-(amt*sign(yy-y)));
            audio_play_sound(choose(snd_auto1,snd_auto2),3,false);
            break;
        }
    }
    
    auto_cooldown = (room_speed*2)-auto_click_level*2;
}

//---------UI STATE-----------
switch ui_state
{
    case "NONE":
    {
        ui_x = approach(ui_x,0,0.2);
    }
    break;
    
    default:
    {
        ui_x = approach(ui_x,1,0.2);
    }
}


//----------Combo Count--------------

//----------Background----------------
background_x[1] += 0.5;
background_x[2] += 0.75;
background_x[3] += 1;


if background_x[1] &gt; 256 then background_x[1] = 0;
if background_x[2] &gt; 256 then background_x[2] = 0;
if background_x[3] &gt; 256 then background_x[3] = 0;


//---------Frame Skipping------------
if fps &lt;= 25
{
    frame_skip ++;
     if (frame_skip mod 3) == 0
     {
        draw_enable_drawevent(true);
     }
     else
     {
        draw_enable_drawevent(false);
     }
} else draw_enable_drawevent(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI Interaction
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);
var button_x = 36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100));
var button_height = sprite_get_height(spr_button);
var button_width = sprite_get_width(spr_button);

switch ui_state
{
    case "NONE":
    {
        if point_in_rectangle(dx,dy,0,32-18,18,32+18)
        {
            ui_state = "UPGRADES";
            audio_play_sound(snd_open,3,false);
        }
        else if (prestige_rank &gt; 0 || prestige_points &gt; 0) &amp;&amp; point_in_rectangle(dx,dy,0,64-18,18,64+18)
        {
            ui_state = "PRESTIGE";
            audio_play_sound(snd_open,3,false);
        }
        else if prestige_rank &gt;= 20 &amp;&amp; point_in_rectangle(dx,dy,0,96-18,18,96+18)
        {
            ui_state = "BLUE_PRESTIGE";
            audio_play_sound(snd_open,3,false);
        }
        else if uber_rank &gt;= 1 &amp;&amp; point_in_rectangle(dx,dy,0,128-18,18,128+18)
        {
            ui_state = "UBER_PRESTIGE";
            audio_play_sound(snd_open,3,false);
        }
    }
    break;

    case "UPGRADES":
    {
        if ui_x != 1 then exit;
        
        //----Block formation complexity upgrade----
        if points &gt;= block_formation_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,64,button_x+button_width,64+button_height)
        {
            //The upgrade is complete!
            points -= block_formation_level_cost;
            block_formation_level += 1;
        }
        //----Click strength----
        else if click_strength &lt; click_strength_max_level &amp;&amp; points &gt;= click_strength_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,128,button_x+button_width,128+button_height)
        {
            //The upgrade is complete!
            points -= click_strength_cost;
            click_strength += 1;
            
            if click_strength == click_strength_max_level then click_strength_maxed = true;
        }
        else if points &gt;= block_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,172,button_x+button_width,172+button_height)
        {
            //The upgrade is complete!
            points -= block_level_cost;
            block_level += 1;
        }
        else if points &gt;= auto_click_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,216,button_x+button_width,216+button_height)
        {
            points -= auto_click_level_cost;
            auto_click_level += 1;
        }
        //PRESTIGE BUTTON
        else if points &gt;= 10000 &amp;&amp; point_in_rectangle(dx,dy,32,216+128,32+button_width,216+128+button_height)
        {
            //Add prestige
            prestige_rank += 1+floor(points/10000000); //1 + floor(pnts/10million);
            prestige_points += round(points/10000);
        
            //Reset and gain prestige!
            if instance_exists(obj_block) then with obj_block instance_destroy();
            
            click_strength = 1; //How much force is applied each click.
            block_formation_level = 1; //The complexity of block formations
            block_level = 1; //The block's potential level!
            auto_click_level = 0;
            points = 0; //The player's score!
            
            click_strength_maxed = false;
            
            audio_play_sound(snd_prestige,3,false);
        }
        
        //------Update costs-------
        block_formation_level_cost = max(25*block_formation_level,power(block_formation_level*100,floor((block_formation_level-1)/2)));
        block_level_cost = max(10*block_level,power(block_level*25,floor((block_level-1)/3)));
        click_strength_cost = max(click_strength*10,(click_strength*(10*floor(click_strength/2))));
        auto_click_level_cost = max(50,75*auto_click_level,power(auto_click_level*100,floor(auto_click_level/3)));
    }
    break;
    
    case "PRESTIGE":
    {
        if ui_x != 1 then exit;
        
        //----Prestige block value----
        if prestige_block_level &lt; prestige_block_level_max &amp;&amp; prestige_points &gt;= prestige_block_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,64,button_x+button_width,64+button_height)
        {
            //The upgrade is complete!
            prestige_points -= prestige_block_level_cost;
            prestige_block_level += 1;
            
            if prestige_block_level == prestige_block_level_max then prestige_block_level_maxed = true;
        }
        //----Combo button----
        else if combo_level &lt; combo_level_max &amp;&amp; prestige_points &gt;= combo_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,128,button_x+button_width,128+button_height)
        {
            prestige_points -= combo_level_cost;
            combo_level += 1;
            
            if combo_level == combo_level_max then combo_level_maxed = true;
        }
        else if prestige_points &gt;= platform_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,172,button_x+button_width,172+button_height)
        {
            //The upgrade is complete!
            prestige_points -= platform_level_cost;
            platform_level += 1;
            
            //Create the new fixture
            with obj_platform
            {
                image_xscale = max(0.1,1-(platform_level/10));
            }
        }else if prestige_points &gt;= respawn_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,216,button_x+button_width,216+button_height)
        {
            //The upgrade is complete!
            prestige_points -= respawn_level_cost;
            respawn_level += 1;
            
            if respawn_level == respawn_level_max then respawn_level_maxed = true;
        }
        
        //UBER PRESTIGE BUTTON
        else if prestige_rank &gt;= uber_rank_cost &amp;&amp; point_in_rectangle(dx,dy,32,216+128,32+button_width,216+128+button_height)
        {
            //Add prestige
            prestige_points = 0;
            prestige_rank = 0;
            uber_rank += 1;
        
            //Reset and gain prestige!
            if instance_exists(obj_block) then with obj_block instance_destroy();
            
            click_strength = 1; //How much force is applied each click.
            block_formation_level = 1; //The complexity of block formations
            base_block_formation_level = 0;
            base_block_level = 0;
            block_level = 1; //The block's potential level!
            auto_click_level = 0;
            combo_power = 1;
            prestige_block_level = 0;
            platform_level = 0;
            respawn_level = 0;
            points = 0; //The player's score!
            
            click_strength_maxed = false;
            
            audio_play_sound(snd_prestige,3,false);
        }
        
        //------Update costs-------
        prestige_block_level_cost = max(1,power(5,prestige_block_level));
        combo_level_cost = max(10,power(10,combo_level));
        platform_level_cost = max(25,power(8,platform_level));
        respawn_level_cost = max(125,250*respawn_level,power(26,respawn_level));
        base_block_level_cost = max(1500,5000*base_block_level,power(250,base_block_level));
        base_block_formation_level_cost = max(2500,6500*base_block_formation_level,power(base_block_formation_level*100,floor((base_block_formation_level-1)/2)));
        combo_power_cost = max(power(10,9),power(2500,combo_power));
        uber_rank_cost = uber_rank*100;
    }
    break;
    
    case "BLUE_PRESTIGE":
    {
        if ui_x != 1 then exit;
        
        //----Base block level----
        if base_block_level &lt; base_block_level_max &amp;&amp; prestige_points &gt;= base_block_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,64,button_x+button_width,64+button_height)
        {
            //The upgrade is complete!
            prestige_points -= base_block_level_cost;
            base_block_level += 1;
            
            if base_block_level == base_block_level_max then base_block_level_maxed = true;
        }
        //----base block formation----
        else if base_block_formation_level &lt; base_block_formation_level_max &amp;&amp; prestige_points &gt;= base_block_formation_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,128,button_x+button_width,128+button_height)
        {
            prestige_points -= base_block_formation_level_cost;
            base_block_formation_level += 1;
            
            if base_block_formation_level == base_block_formation_level_max then base_block_formation_level_maxed = true;
        } 
        else if prestige_points &gt;= combo_power_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,172,button_x+button_width,172+button_height)
        {
            //Combo Power!
            prestige_points -= combo_power_cost;
            combo_power += 1;
        }
        
        //------Update costs-------
        base_block_level_cost = max(1500,5000*base_block_level,power(250,base_block_level));
        base_block_formation_level_cost = max(2500,6500*base_block_formation_level,power(base_block_formation_level*100,floor((base_block_formation_level-1)/2)));
        combo_power_cost = max(power(10,9),power(2500,combo_power));
    }
    break;
    
    case "UBER_PRESTIGE":
    {
        if ui_x != 1 then exit;
        
        //----Value Power----
        if base_block_level &lt; base_block_level_max &amp;&amp; prestige_points &gt;= base_block_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,64,button_x+button_width,64+button_height)
        {
            //The upgrade is complete!
            prestige_points -= base_block_level_cost;
            base_block_level += 1;
            
            if base_block_level == base_block_level_max then base_block_level_maxed = true;
        }
        //----base block formation----
        else if base_block_formation_level &lt; base_block_formation_level_max &amp;&amp; prestige_points &gt;= base_block_formation_level_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,128,button_x+button_width,128+button_height)
        {
            prestige_points -= base_block_formation_level_cost;
            base_block_formation_level += 1;
            
            if base_block_formation_level == base_block_formation_level_max then base_block_formation_level_maxed = true;
        } 
        else if prestige_points &gt;= combo_power_cost &amp;&amp; point_in_rectangle(dx,dy,button_x,172,button_x+button_width,172+button_height)
        {
            //Combo Power!
            prestige_points -= combo_power_cost;
            combo_power += 1;
        }
        
        //------Update costs-------
        base_block_level_cost = max(1500,5000*base_block_level,power(250,base_block_level));
        base_block_formation_level_cost = max(2500,6500*base_block_formation_level,power(base_block_formation_level*100,floor((base_block_formation_level-1)/2)));
        combo_power_cost = max(power(10,9),power(2500,combo_power));
        
        //-----Update max---------
        scr_updateMaxed();
    }
    break;
}


//--------CLOSE MENUS----------------
var _x = sprite_get_width(spr_button);
var _y = sprite_get_height(spr_button);

if ui_state != "NONE" &amp;&amp; point_in_rectangle(dx,dy,334,16,334+_x,16+_y)
{
    if ui_state != "NONE"
    {
        audio_play_sound(snd_close,3,false);
    }
    
    ui_state = "NONE";
}

//---------MENU OPTIONS---------------
var _width = sprite_get_width(spr_ui_sound);
var _height = sprite_get_height(spr_ui_sound);
var _y = window_get_height()-_height;

if point_in_rectangle(dx,dy,32-_width/2,_y-_height/2,32+_width/2,_y+_height/2)
{
    sound_muted = !sound_muted;
    audio_master_gain(1*sound_muted);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if cooldown &gt; 0 then exit;

if instance_exists(obj_block)
{
    with obj_block
    {
        var amt = click_strength*12; //How powerful the click is
        
        //Check whether or not the block is within range
        if point_distance(x,y,mouse_x,mouse_y) &gt; 64+amt then continue;
        
        //Apply the impulse
        physics_apply_impulse(mouse_x,mouse_y,-(amt*sign(mouse_x-x)),-(amt*sign(mouse_y-y)));
    }
}

cooldown = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SAVE GAME
var save_list = ds_list_create();

//-----Save stats-----
var _map = ds_map_create();
ds_list_add(save_list,_map);
ds_list_mark_as_map(save_list,ds_list_size(save_list)-1);

//- Package levels
ds_map_add(_map,"click_strength",click_strength);
ds_map_add(_map,"block_formation_level",block_formation_level);
ds_map_add(_map,"block_level",block_level);
ds_map_add(_map,"auto_click_level",auto_click_level);
ds_map_add(_map,"points",points);
ds_map_add(_map,"prestige_points",prestige_points);

//- package prestige levels
ds_map_add(_map,"prestige_block_level",prestige_block_level);
ds_map_add(_map,"prestige_rank",prestige_rank);
ds_map_add(_map,"combo_level",combo_level);
ds_map_add(_map,"platform_level",platform_level);
ds_map_add(_map,"respawn_level",respawn_level);

//- blue prestige levels
ds_map_add(_map,"base_block_level",base_block_level);
ds_map_add(_map,"base_block_formation_level",base_block_formation_level);
ds_map_add(_map,"combo_power",combo_power);

//- uber prestige levels
ds_map_add(_map,"uber_rank",uber_rank);
ds_map_add(_map,"uber_prestige_points",uber_prestige_points);

//Game maker prefers to start with a ds_map.
//Wrap the root List up in a map!
var _wrapper = ds_map_create();
ds_map_add_list(_wrapper,"STATS",save_list);

//Save to a string
var str = json_encode(_wrapper);
scr_saveString("blockFarmer2.sav",str);

//"Nuke the data." ~Shuan Spalding
ds_map_destroy(_wrapper);

print('Game Saved');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SAVE GAME ON GAME END
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the points
draw_set_font(fnt_terrariaLarge);
var str_points = scr_convertToCompressedString(points);
draw_text(window_get_width()-140-string_width(str_points),8,"Points: "+str_points);

//---------Combo Count---------------
if combo_count &gt; 1
{
    var _str = "Combo Multiplier: x"+string(power(combo_count,combo_power));
    draw_text(room_width-string_width(_str)*2-100,8,_str);
}


//---------UI-----------------------
switch ui_state
{
    case "NONE":
    {
        draw_sprite(spr_arrow,0,0,32);
        if prestige_rank &gt; 0 || prestige_points &gt; 0 then draw_sprite(spr_arrow,1,0,64);
        if prestige_rank &gt;= 20 then draw_sprite(spr_arrow,2,0,96);
        //if uber_rank &gt;= 1 then draw_sprite(spr_arrow,3,0,128);
    }
    break;

    case "UPGRADES":
    {
        //Draw the shop
        var _x = 32*ui_x;
        var bkg_size = (36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x;
        
        draw_set_color(c_gray);
        draw_rectangle(0,6,bkg_size-150,265,false);
        draw_set_color(c_black);
        
        draw_text(_x,8,"Upgrades");
        
        draw_set_font(fnt_terrariaSmall);
        draw_text(_x,64,"Block Amount: "+string(block_formation_level)+"#Cost: "+scr_convertToCompressedString(block_formation_level_cost));
        draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,64);
        
        draw_text(_x,128,"Click Strength: "+string(click_strength)+"#Cost: "+scr_convertToCompressedString(click_strength_cost));
        draw_sprite(spr_button,click_strength_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,128);
        
        draw_text(_x,172,"Block Value: "+string(block_level)+"#Cost: "+scr_convertToCompressedString(block_level_cost));
        draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,172);
        
        draw_text(_x,216,"Auto-Click Level: "+string(auto_click_level)+"#Cost: "+scr_convertToCompressedString(auto_click_level_cost));
        draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,216);
        
        //---------PRESTIGE BUTTON-----------
        if (points &gt;= 10000)
        {
            draw_sprite(spr_button,2,32,216+128);
            draw_text(28,354+32,"+"+scr_convertToCompressedString(round((points/10000)))+" Prestige Points");
        }
        //-----------STATS------------------
        var value = 1+(((block_level+uber_rank+base_block_level)-1)*(2+uber_rank));
        draw_text(_x,300,"Max block value: "+string(value+ceil(value*(((prestige_rank*2)+prestige_block_level)/(6-prestige_block_level)))));
    }
    break;
    
    case "PRESTIGE":
    {
        if prestige_rank &gt; 0 || prestige_points &gt; 0
        {
            var _x = 32*ui_x;
            var bkg_size = (36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x;
        
            draw_set_color(c_orange);
            draw_rectangle(0,6,bkg_size-150,265,false);
            draw_set_color(c_black);
        
            draw_text(_x,8,"Prestige Upgrades");
            
            draw_set_font(fnt_terrariaSmall);
            draw_text(_x,64,"Better Value: "+string(prestige_block_level)+"#Cost: "+scr_convertToCompressedString(prestige_block_level_cost));
            draw_sprite(spr_button,prestige_block_level_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,64);
            
            draw_text(_x,128,"Combo multiplier: "+string(combo_level)+"#Cost: "+scr_convertToCompressedString(combo_level_cost));
            draw_sprite(spr_button,combo_level_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,128);
            
            draw_text(_x,172,"Platform level: "+string(platform_level)+"#Cost: "+scr_convertToCompressedString(platform_level_cost));
            draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,172);
            
            draw_text(_x,216,"Respawn Rate: "+string(respawn_level)+"#Cost: "+scr_convertToCompressedString(respawn_level_cost));
            draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,216);
            
            //UBER PRESTIGE BUTTON
            if (prestige_rank &gt;= 10000)
            {
                draw_sprite(spr_button,3,32,216+128);
                //draw_text(28,354+32,"+"+scr_convertToCompressedString(round((prestige_rank/10000)))+" Uber Prestige Points");
            }
        }
    }
    break;
    
    case "BLUE_PRESTIGE":
    {
        if prestige_rank &gt;= 20
        {
            var _x = 32*ui_x;
            var bkg_size = (36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x;
        
            draw_set_color(c_navy);
            draw_rectangle(0,6,330,265,false);
            draw_set_color(c_white);
        
            draw_text(_x,8,"Prestige Upgrades");
            
            draw_set_font(fnt_terrariaSmall);
            draw_text(_x,64,"Basic Value: "+string(base_block_level)+"#Cost: "+scr_convertToCompressedString(base_block_level_cost));
            draw_sprite(spr_button,base_block_level_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,64);
            
            draw_text(_x,128,"Basic Formation: "+string(base_block_formation_level)+"#Cost: "+scr_convertToCompressedString(base_block_formation_level_cost));
            draw_sprite(spr_button,base_block_formation_level_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,128);
            
            draw_text(_x,172,"Combo Power: "+string(combo_power)+"#Cost: "+scr_convertToCompressedString(combo_power_cost));
            draw_sprite(spr_button,0,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,172);
            
            draw_set_color(c_black);
        }
    }
    break;
    
/*    case "UBER_PRESTIGE":
    {
        if uber_rank &gt;= 1
        {
            var _x = 32*ui_x;
            var bkg_size = (36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x;
        
            draw_set_color(c_purple);
            draw_rectangle(0,6,330,265,false);
            draw_set_color(c_white);
        
            draw_text(_x,8,"Uber Upgrades");
            
            draw_set_font(fnt_terrariaSmall);
            draw_text(_x,64,"Value Power: "+string(base_block_level)+"#Cost: "+scr_convertToCompressedString(base_block_level_cost));
            draw_sprite(spr_button,base_block_level_maxed,(36+string_width("Block Formation Complexity#Cost: "+string(block_formation_level*100)))*ui_x,64);
            
            draw_set_color(c_black);
        }
    }
    break;
*/
}

//-----------Prestige rank------------
if prestige_points &gt; 0 || prestige_rank &gt; 0
{
    draw_set_font(fnt_terrariaSmall);
    draw_text(window_get_width()-140-string_width(string(prestige_rank)),216+64,"Prestige Rank: "+scr_convertToCompressedString(prestige_rank));
    draw_text(window_get_width()-140-string_width(string(prestige_points)),64,"Prestige Points: "+scr_convertToCompressedString(prestige_points));
}

//----------Uber Rank----------
if uber_rank &gt; 0 
{
    draw_set_font(fnt_terrariaSmall);
    draw_text(window_get_width()-140-string_width(string(uber_rank)),216+96,"Uber Rank: "+scr_convertToCompressedString(uber_rank));
    //draw_text(window_get_width()-200-string_width(string(uber_prestige_points)),96,"Uber Prestige Points: "+scr_convertToCompressedString(uber_prestige_points));
}

//----------MENU CONTROLS------
draw_sprite(spr_ui_sound,sound_muted,32,window_get_height()-sprite_get_height(spr_ui_sound));

//----------EXIT---------------
if ui_state != "NONE"
{
    draw_sprite(spr_button,4,334,16);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="98">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>points+= 1000000000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>block_formation_level += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
