<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gremlin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "";
text = ""; //Words that the gremlin copies
text_say = ""; //Words that the gremlin says
text_time = room_speed*3;
state = "WANDER";
image_speed = 30/60;
wander_distance = 0;
wander_direction = choose(1,-1);
attack_cooldown = false;

//Where the gremlin last stopped
lastx = x;
lasty = y;

//Sprite!
sprite_index = spr_gremlin;

//physics locals
walk_spd = 1;
grav = 0;
hspd = 0;
vspd = 0;
ground_point = room_height-32; //The point at which the gremlin has reached the ground.

//init stats
level = 1;
maxHp = level*5;
hp = maxHp;
xp = 0;
xp_goal = 1;

//delayed stat load
alarm[3] = 3;

//Despawn Timer
despawn_time = room_speed*360;
alarm[2] = despawn_time; //6 minute timer

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_saveStats(name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK RESET
attack_cooldown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOAD STATS - FRAME DELAY
scr_loadStats(name);

maxHp = level*5;
hp = maxHp;
xp_goal = level*(10+level);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Despawn Timer
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset text
text = "";
text_say = "";

var xp_amt = 5;

xp += irandom(level)*irandom(4);

xp += xp_amt;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///From idle to wander
wander_distance = irandom_range(16,16*16);
wander_direction = choose(1,-1);

//Redirect back to the middle.
var final_position = x+wander_distance*wander_direction;
var border = 16*6;

if final_position &lt;= border
{
    wander_direciton = 1;
}
else if final_position &gt;= room_width-border
{
    wander_direction = -1;
}

state = "WANDER";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Wandering
switch state
{
    case "IDLE":
    {
        if !instance_exists(ENEMY) then image_index = 0
        speed = 0;
        
        //Alarm roll for Wander
        if alarm[0] == -1 then alarm[0] = room_speed*irandom_range(1,8);
    }
    break;
    
    case "WANDER":
    {
        speed = walk_spd*wander_direction;
        wander_distance = approach(wander_distance,0,walk_spd);
        
        if wander_distance &lt;= 0 then state = "IDLE";
        
        if lastx &lt; x then image_xscale = 1 else image_xscale = -1;
        lastx = x;
    }
    break;
    
    case "FALL":
    {
        if grav &lt;= 4 then grav += twitchControl.grav_rate;
        
        if vspd + grav &gt;= ground_point
        {
            vspd += grav; //Go down!
        } 
        else
        {
            //We have collided
            y = floor(y); //Let's not work with floating values please
            
            while y &lt; ground_point
            {
                y+=1;
            }
            
            grav = 0;
            vspd = 0;
            state = "IDLE";
        }
    }
    break;
}

//FALL
if y &lt; ground_point
{
    state = "FALL";
}

//Calculate forces of movement
x += hspd;
y += vspd;

hspd = approach(hspd,0,0.2);

//--------------Gremlin words-----------
//Limit our text.
if text != ""
{
    var text_say_length = string_length(text_say);

    if text_say_length &lt;= 25
    {
        text_say += string_char_at(text,text_say_length+1);
    }
    
    if text_say_length &gt; 25 &amp;&amp; text_say_length &lt;= 28 text_say += ".";
}


//-------------Level Up Check-------------------------
if xp &gt;= xp_goal
{
    event_user(0); //Level up!
}

//---------------ENEMY CHECK--------------------
if instance_exists(ENEMY) &amp;&amp; attack_cooldown == false
{
    //NOTE: damage calculation is based on level;
    //Gremlin will move toward the nearest enemy on the x axis;
    //Gremlin will hit enemies 8 pixels away;
    
    var target = instance_nearest(x,y,ENEMY);
    var tx = target.x;
    var ty = target.y;
    
    if point_distance(tx,ty,x,y) &lt;= 16*6
    {
        //Horizontal movement
        var h_dir = sign(tx-x);
        
        hspd = approach(hspd,walk_spd*h_dir,1);
        x += hspd;
        
        image_xscale = 1*h_dir;
        
        //WIP JUMP
        
        //Attack an enemy
        if point_distance(x,y,tx,ty) &lt;= sprite_width+4
        {
            scr_hurt(target,1,hspd*3,level);
            attack_cooldown = true;
            alarm[4] = room_speed/2;
        }
    }
}

//----------BOUND TO THE ROOM---------
x = clamp(x,8,room_width-8);
y = clamp(y,y,room_height);

if wander_distance != 0 &amp;&amp; state == "WANDER" &amp;&amp; (x &lt;= 9 || x &gt;= room_width-9)
{
    wanderDistance = 0;
}

//--------BOSS ATTACKS-----------
if instance_exists(BOSS) &amp;&amp; text != ""
{
    var boss = BOSS.id;
    var current_word = boss.current_word;
    show_debug_message(current_word + "|" + text);
    show_debug_message(string(string_length(current_word)) + "|" + string(string_length(text)));
    
    if text == current_word &amp;&amp; current_word != noone
    {
        show_debug_message("correct word");
    
        var i = instance_create(x,y,obj_wordSnipe);
        i.enemy = boss;
        
        var _d = level*4;
        
        with boss
        {
            current_word = scr_getWord();
            scr_hurt(id,6,3,_d);
        }
        
        text_say = choose("Take that!","Get him!","Fire!");
        text = "";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_hurt(id,-6,6*choose(1,-1),0);

instance_create(x,y,obj_terrance);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LEVEL UP
level += 1;
maxHp = level*5;
hp = maxHp;
xp_goal = level*(10+level);
xp = 0;

//Spawn the level up effect~!
repeat(6)
{
    instance_create(x,y,efct_levelOrb);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_saveStats(name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//Draw the viewer's name!
draw_text(x-(string_length(name)*5)/2,y+12,name);

//Draw the speech bubble and the speech or Health
if text_say != ""
{
    draw_text(x-string_width(text_say)/2,y-16,text_say);
}
else if hp &lt; maxHp
{
    var hp_str = string(hp)+"/"+string(maxHp);
    draw_text(x-string_width(hp_str)/2,y-16,hp_str);
}

//Level text
var level_str = "Lv. "+string(level);
draw_text(x-string_width(level_str)/2,y+20,level_str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
